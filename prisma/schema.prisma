// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String?
  password      String?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  portfolios    Portfolio[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  title       String
  slug        String   @unique
  template    String   @default("modern")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Personal Information
  name        String?
  professionalTitle String?
  email       String?
  phone       String?
  location    String?
  avatar      String?
  bio         String?
  
  // Social Links
  github      String?
  linkedin    String?
  twitter     String?
  website     String?
  
  // Sections
  about       About?
  experience  Experience[]
  education   Education[]
  skills      Skill[]
  projects    Project[]
  certifications Certification[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model About {
  id          String @id @default(cuid())
  portfolioId String @unique
  content     String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(cuid())
  portfolioId String
  company     String
  position    String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean  @default(false)
  description String
  technologies String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(cuid())
  portfolioId String
  institution String
  degree      String
  field       String?
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean  @default(false)
  gpa         Float?
  description String?
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String @id @default(cuid())
  portfolioId String
  name        String
  category    String @default("technical")
  level       Int    @default(3) // 1-5 scale
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  portfolioId String
  title       String
  description String
  image       String?
  url         String?
  github      String?
  technologies String
  featured    Boolean  @default(false)
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Certification {
  id          String   @id @default(cuid())
  portfolioId String
  name        String
  issuer      String
  issueDate   DateTime
  expiryDate  DateTime?
  url         String?
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
} 